name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        make -j$(nproc)
    
    - name: Test build artifacts
      run: |
        test -f build/src/drcom_client
        test -f build/mock_server/mock_drcom_server
        echo "Build artifacts verified successfully"
    
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drcom-client-linux
        path: |
          build/src/drcom_client
          build/mock_server/mock_drcom_server
          config/
        retention-days: 5

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release -j
    
    - name: Test build artifacts
      run: |
        if (-not (Test-Path "build/src/Release/drcom_client.exe")) { exit 1 }
        if (-not (Test-Path "build/mock_server/Release/mock_drcom_server.exe")) { exit 1 }
        Write-Host "Build artifacts verified successfully"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drcom-client-windows
        path: |
          build/src/Release/drcom_client.exe
          build/mock_server/Release/mock_drcom_server.exe
          config/
        retention-days: 5

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        brew install cmake
    
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release
    
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
    
    - name: Test build artifacts
      run: |
        test -f build/src/drcom_client
        test -f build/mock_server/mock_drcom_server
        echo "Build artifacts verified successfully"
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drcom-client-macos
        path: |
          build/src/drcom_client
          build/mock_server/mock_drcom_server
          config/
        retention-days: 5

  integration-test:
    runs-on: ubuntu-latest
    needs: build-linux
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: drcom-client-linux
        path: artifacts/
    
    - name: List downloaded files for debugging
      run: |
        echo "Contents of artifacts directory:"
        find artifacts/ -type f -ls
        echo "Current directory contents:"
        ls -la
    
    - name: Make executables runnable
      run: |
        # 查找实际的可执行文件位置
        DRCOM_CLIENT=$(find artifacts/ -name "drcom_client" -type f)
        MOCK_SERVER=$(find artifacts/ -name "mock_drcom_server" -type f)
        
        if [ -z "$DRCOM_CLIENT" ] || [ -z "$MOCK_SERVER" ]; then
          echo "ERROR: Could not find required executables"
          echo "Looking for drcom_client: $DRCOM_CLIENT"
          echo "Looking for mock_drcom_server: $MOCK_SERVER"
          exit 1
        fi
        
        chmod +x "$DRCOM_CLIENT"
        chmod +x "$MOCK_SERVER"
        
        # 为后续步骤导出路径
        echo "DRCOM_CLIENT=$DRCOM_CLIENT" >> $GITHUB_ENV
        echo "MOCK_SERVER=$MOCK_SERVER" >> $GITHUB_ENV
    
    - name: Run integration test
      run: |
        # 启动 mock 服务器
        "$MOCK_SERVER" &
        SERVER_PID=$!
        sleep 2
        
        # 运行客户端测试
        timeout 10s "$DRCOM_CLIENT" -c config/drcom_test.conf || echo "Client test completed"
        
        # 清理
        kill $SERVER_PID || true
        
        echo "Integration test completed"

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Debug artifact structure
      run: |
        echo "=== Artifact structure ==="
        find . -name "drcom-client-*" -type d | while read dir; do
          echo "Directory: $dir"
          find "$dir" -type f -ls
        done
    
    - name: Create release packages
      run: |
        # 创建 Linux 发布包
        mkdir -p releases/linux
        find drcom-client-linux/ -name "drcom_client" -type f -exec cp {} releases/linux/ \;
        find drcom-client-linux/ -name "mock_drcom_server" -type f -exec cp {} releases/linux/ \;
        if [ -d "drcom-client-linux/config" ]; then
          cp -r drcom-client-linux/config releases/linux/
        fi
        tar -czf drcom-client-linux.tar.gz -C releases linux/
        
        # 创建 Windows 发布包
        mkdir -p releases/windows
        find drcom-client-windows/ -name "drcom_client.exe" -type f -exec cp {} releases/windows/ \;
        find drcom-client-windows/ -name "mock_drcom_server.exe" -type f -exec cp {} releases/windows/ \;
        if [ -d "drcom-client-windows/config" ]; then
          cp -r drcom-client-windows/config releases/windows/
        fi
        (cd releases && zip -r ../drcom-client-windows.zip windows/)
        
        # 创建 macOS 发布包
        mkdir -p releases/macos
        find drcom-client-macos/ -name "drcom_client" -type f -exec cp {} releases/macos/ \;
        find drcom-client-macos/ -name "mock_drcom_server" -type f -exec cp {} releases/macos/ \;
        if [ -d "drcom-client-macos/config" ]; then
          cp -r drcom-client-macos/config releases/macos/
        fi
        tar -czf drcom-client-macos.tar.gz -C releases macos/
        
        # 验证发布包
        echo "=== Release packages created ==="
        ls -la *.tar.gz *.zip
        
        echo "=== Contents verification ==="
        tar -tzf drcom-client-linux.tar.gz | head -10
        tar -tzf drcom-client-macos.tar.gz | head -10
        unzip -l drcom-client-windows.zip | head -10
    
    - name: Upload release packages
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: |
          drcom-client-linux.tar.gz
          drcom-client-windows.zip
          drcom-client-macos.tar.gz
